
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  hashedPassword: 'hashedPassword',
  role: 'role',
  defaultDomain: 'defaultDomain',
  resellerTierId: 'resellerTierId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  suspensionUntil: 'suspensionUntil'
};

exports.Prisma.EmbyUserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  hashedPassword: 'hashedPassword',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResellerTierScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creditToDaysRate: 'creditToDaysRate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditBalanceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  updatedAt: 'updatedAt'
};

exports.Prisma.CreditLogScalarFieldEnum = {
  id: 'id',
  actorUserId: 'actorUserId',
  delta: 'delta',
  reason: 'reason',
  targetUserId: 'targetUserId',
  createdAt: 'createdAt'
};

exports.Prisma.EmbyServerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  baseUrl: 'baseUrl',
  apiKey: 'apiKey',
  ownerUserId: 'ownerUserId',
  maxUsers: 'maxUsers',
  referenceUserId: 'referenceUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  serverId: 'serverId',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageLibraryScalarFieldEnum = {
  id: 'id',
  packageId: 'packageId',
  libraryId: 'libraryId',
  libraryName: 'libraryName'
};

exports.Prisma.UserServerLinkScalarFieldEnum = {
  id: 'id',
  embyUserId: 'embyUserId',
  serverId: 'serverId',
  packageId: 'packageId',
  status: 'status',
  startAt: 'startAt',
  expireAt: 'expireAt',
  suspendedAt: 'suspendedAt',
  suspendedById: 'suspendedById',
  creditsAllocated: 'creditsAllocated',
  creditsUsed: 'creditsUsed',
  creditsRemaining: 'creditsRemaining',
  creditType: 'creditType',
  demoHours: 'demoHours',
  isDemo: 'isDemo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmbyAccountScalarFieldEnum = {
  id: 'id',
  embyUserId: 'embyUserId',
  serverId: 'serverId',
  embyUserIdInternal: 'embyUserIdInternal',
  embyUsername: 'embyUsername',
  userServerLinkId: 'userServerLinkId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserPolicyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  isTemplate: 'isTemplate',
  isAdministrator: 'isAdministrator',
  isHidden: 'isHidden',
  isDisabled: 'isDisabled',
  maxParentalRating: 'maxParentalRating',
  enableUserPreferenceAccess: 'enableUserPreferenceAccess',
  enableAudioPlaybackTranscoding: 'enableAudioPlaybackTranscoding',
  enableVideoPlaybackTranscoding: 'enableVideoPlaybackTranscoding',
  enablePlaybackRemuxing: 'enablePlaybackRemuxing',
  forceRemoteSourceTranscoding: 'forceRemoteSourceTranscoding',
  enableSyncTranscoding: 'enableSyncTranscoding',
  enableMediaConversion: 'enableMediaConversion',
  enableContentDownloading: 'enableContentDownloading',
  enableContentDeletion: 'enableContentDeletion',
  enableCameraUpload: 'enableCameraUpload',
  enableRemoteAccess: 'enableRemoteAccess',
  enableMediaPlayback: 'enableMediaPlayback',
  remoteClientBitrateLimit: 'remoteClientBitrateLimit',
  maxActiveSessions: 'maxActiveSessions',
  enableAllDevices: 'enableAllDevices',
  enableLiveTvManagement: 'enableLiveTvManagement',
  enableLiveTvAccess: 'enableLiveTvAccess',
  enableAllChannels: 'enableAllChannels',
  enableRemoteControlOfOtherUsers: 'enableRemoteControlOfOtherUsers',
  enableSharedDeviceControl: 'enableSharedDeviceControl',
  enablePublicSharing: 'enablePublicSharing',
  enableAllFolders: 'enableAllFolders',
  loginAttemptsBeforeLockout: 'loginAttemptsBeforeLockout',
  syncPlayAccess: 'syncPlayAccess',
  enableSchedule: 'enableSchedule',
  scheduleStart: 'scheduleStart',
  scheduleEnd: 'scheduleEnd',
  blockedTags: 'blockedTags',
  blockedMediaFolders: 'blockedMediaFolders',
  blockedChannels: 'blockedChannels',
  accessSchedules: 'accessSchedules',
  blockUnratedItems: 'blockUnratedItems',
  serverId: 'serverId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.RoleName = exports.$Enums.RoleName = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  TECH_ADMIN: 'TECH_ADMIN',
  PREMIUM_RESELLER: 'PREMIUM_RESELLER',
  ADVANCED_RESELLER: 'ADVANCED_RESELLER',
  BASIC_RESELLER: 'BASIC_RESELLER',
  READ_ONLY: 'READ_ONLY'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  EXPIRED: 'EXPIRED'
};

exports.Prisma.ModelName = {
  User: 'User',
  EmbyUser: 'EmbyUser',
  ResellerTier: 'ResellerTier',
  CreditBalance: 'CreditBalance',
  CreditLog: 'CreditLog',
  EmbyServer: 'EmbyServer',
  Package: 'Package',
  PackageLibrary: 'PackageLibrary',
  UserServerLink: 'UserServerLink',
  EmbyAccount: 'EmbyAccount',
  UserPolicy: 'UserPolicy'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
