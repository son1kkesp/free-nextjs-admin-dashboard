const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function testDirectLogin() {
  try {
    console.log('üîç Probando login directo...\n');

    // Simular el proceso completo de NextAuth
    const email = 'admin@emby.com';
    const password = 'admin123';

    console.log(`1Ô∏è‚É£ Buscando usuario: ${email}`);
    const user = await prisma.user.findUnique({
      where: { email }
    });

    if (!user) {
      console.log('‚ùå Usuario no encontrado');
      return;
    }

    console.log('‚úÖ Usuario encontrado:', {
      id: user.id,
      email: user.email,
      role: user.role,
      isActive: user.isActive,
      isTest: user.isTest
    });

    console.log('\n2Ô∏è‚É£ Verificando contrase√±a...');
    const isPasswordValid = await bcrypt.compare(password, user.hashedPassword);
    console.log('‚úÖ Contrase√±a v√°lida:', isPasswordValid);

    if (!isPasswordValid) {
      console.log('‚ùå Contrase√±a inv√°lida');
      return;
    }

    console.log('\n3Ô∏è‚É£ Simulando objeto de NextAuth...');
    const authUser = {
      id: user.id,
      email: user.email,
      role: user.role,
      isActive: user.isActive,
    };

    console.log('‚úÖ Objeto de autenticaci√≥n:', authUser);

    console.log('\n4Ô∏è‚É£ Simulando token JWT...');
    const token = {
      sub: user.id,
      email: user.email,
      role: user.role,
      isActive: user.isActive,
      iat: Math.floor(Date.now() / 1000),
      exp: Math.floor(Date.now() / 1000) + (30 * 24 * 60 * 60) // 30 d√≠as
    };

    console.log('‚úÖ Token JWT:', token);

    console.log('\n5Ô∏è‚É£ Simulando sesi√≥n...');
    const session = {
      user: {
        id: user.id,
        email: user.email,
        role: user.role,
        isActive: user.isActive
      },
      expires: new Date(Date.now() + (30 * 24 * 60 * 60 * 1000)).toISOString()
    };

    console.log('‚úÖ Sesi√≥n:', session);

    console.log('\nüéâ Proceso de autenticaci√≥n simulado exitosamente');
    console.log('üìä El usuario deber√≠a aparecer como:', user.role);

  } catch (error) {
    console.error('‚ùå Error en la prueba:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testDirectLogin();
